import groovy.json.JsonSlurper
import groovy.json.JsonOutput

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'

    // spring rest docs 관련
    id 'org.asciidoctor.jvm.convert' version '3.3.2'

    // rest docs api spec
    id 'com.epages.restdocs-api-spec' version '0.18.2'
}

group = 'me.jooeon'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
//    snippetsDir = file("build/generated-snippets")
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // AWS S3
    implementation platform("software.amazon.awssdk:bom:2.29.17")
    implementation 'software.amazon.awssdk:s3'

    // apache
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.5'

    // thumbnailator
    implementation 'net.coobird:thumbnailator:0.4.20'

    // rest docs api spec
    testImplementation('com.epages:restdocs-api-spec-mockmvc:0.18.2')
    testImplementation('com.epages:restdocs-api-spec:0.18.2')

    // swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir
    finalizedBy asciidoctor
}

tasks.named('testClasses') {
    doFirst {
        delete file('build/docs/asciidoc')
    }
}

tasks.named('asciidoctor') {
    dependsOn test
    configurations 'asciidoctorExt'
    inputs.dir snippetsDir
    finalizedBy copyDocument

    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file('build/docs/asciidoc')
    into file('src/main/resources/static/docs')
}


bootJar {
    dependsOn asciidoctor
    doFirst {
        delete file('static/docs')
    }
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

openapi3 {
    server = 'http://localhost:8080'
    title = 'My API'
    description = 'My API description'
    version = '0.1.0'
    format = 'json'

    copy {
        from "build/api-spec"
        into "src/main/resources/static/docs/"
    }
}

task injectSecurityDefinition {
    doLast {
        def outputFile = file("build/api-spec/openapi3.json")
        if (outputFile.exists()) {
            def json = new JsonSlurper().parseText(outputFile.text)
            // components가 없으면 생성
            json.components = json.components ?: [:]
            // securitySchemes가 없으면 생성
            json.components.securitySchemes = json.components.securitySchemes ?: [:]
            // JWT 보안 스키마 추가
            json.components.securitySchemes.BearerAuth = [
                    type         : "http",
                    scheme       : "bearer",
                    bearerFormat : "JWT"
            ]
            // 전역 security 설정 추가
            json.security = [[ "BearerAuth": [] ]]

            // JSON 포맷 재설정 후 저장
            outputFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(json))
            println "Security definition injected into openapi3.json"
        } else {
            println "openapi3.json not found at: ${outputFile.absolutePath}"
        }
    }
}

task copyOpenApiSpec(type: Copy) {
    from "build/api-spec"
    include "openapi3.json"
    into "src/main/resources/static/docs"
}

// openapi3 태스크가 끝난 후에 injectSecurityDefinition 태스크 실행
afterEvaluate {
    tasks.named("openapi3").configure {
        finalizedBy injectSecurityDefinition, copyOpenApiSpec
    }
}

afterEvaluate {
    // 빌드 실행 openaapi3 테스크가 자동 실해되도록 설정
    tasks.named("build") {
        dependsOn tasks.named("openapi3")
    }

    // bootJar 실행 시 openapi3가 실행되도록 설정 (실행 가능한 JAR에 포함)
    tasks.named("bootJar") {
        dependsOn tasks.named("openapi3")
    }
}